{
  "meta": {
    "title": "PDF查看器开发最终定稿方案",
    "role": "方案规划师 (agent-planner)",
    "summary": "基于用户需求和sequentialthinking分析生成的PDF查看器精细化开发方案",
    "user_input": "请为PDF查看器开发任务创建详细的解决方案规划。基于以下需求：\n1. 开发src\\frontend\\pdf-viewer模块，基于pdf-home的加载原理\n2. 修改ai-launcher.ps1启动所有进程并显示日志，同时修改app.py启动pdf-viewer\n3. 参考pdf-home后端的qtwebengine实现\n4. PDF数据来自data\\pdfs\\7d688289f74a.pdf\n5. 使用WebSocket通信传输数据\n6. 前端使用pdfjs渲染\n7. 前端使用eventbus.js模块\n8. 最终通过./ai-launcher.ps1启动可以看到PDF渲染在窗口中",
    "creation_time": "20250903193921",
    "file_number": "001",
    "forum_reference": "AIforum/20250903193921-forum-001.json"
  },
  "content": {
    "background": {
      "title": "背景",
      "summary": "PDF查看器模块已有详细规范但缺少实现代码，需要基于现有架构进行开发",
      "details": "项目已有pdf-viewer模块的完整规范文档（STRUCTURE-001、PDFJS-INTEGRATION-001、WEBSOCKET-CONTRACT-001等），包括模块结构、PDF.js集成、WebSocket通信、QtWebEngine适配等详细要求。但模块缺少具体的实现代码，需要基于pdf-home的事件总线架构进行开发，并与现有后端系统集成。"
    },
    "plan": {
      "title": "方案",
      "summary": "完整的PDF查看器开发实施方案，涵盖前端、后端、通信协议和启动配置",
      "details": "1. 前端实现：\n   - 创建src/frontend/pdf-viewer/main.js实现PDF查看器核心逻辑\n   - 集成PDF.js v3.4.120+版本（从v3.11.174降级以符合规范）\n   - 配置worker线程支持跨域资源加载和内存优化\n   - 实现逐页懒加载、缩放控制和页面导航功能\n   - 使用eventbus.js模块进行事件通信\n\n2. WebSocket通信：\n   - 使用现有standard_protocol.py中的PDF_DETAIL_REQUEST和PDF_DETAIL_RESPONSE消息类型\n   - 实现心跳机制（30秒间隔）和重连策略（最多3次重连）\n   - 确保消息格式符合JSON schema标准，包含request_id追踪\n\n3. 后端修改：\n   - 扩展src/backend/app/application.py支持PDF_DETAIL_REQUEST消息处理\n   - 实现PDF文件内容读取和分页传输功能\n   - 解析PDF元数据解决7d688289f74a.pdf的page_count=0问题\n   - 支持大文件处理和内存优化\n\n4. QtWebEngine兼容性：\n   - 配置webPreferences确保contextIsolation和nodeIntegration正确设置\n   - 通过preload脚本实现安全IPC通信\n   - 启用remote-debugging-port（9223）支持调试\n   - 处理不同Qt版本（5.15和6.5）的兼容性\n\n5. 启动配置：\n   - 修改ai-launcher.ps1支持pdf-viewer模块启动\n   - 将当前启动URL从http://localhost:3000/pdf-home/index.html改为支持pdf-viewer\n   - 考虑通过URL参数（如?module=pdf-viewer）或路由配置实现模块切换\n\n6. 测试验证：\n   - 制定详细的测试计划，包括单元测试、集成测试和端到端测试\n   - 验证在QtWebEngine环境下打开100MB PDF文件的性能（5秒内渲染首屏）\n   - 测试WebSocket断线重连和消息幂等性\n   - 验证内存受限时的降级机制"
    },
    "assumptions": {
      "title": "假设",
      "summary": "项目实施的关键前提条件和假设",
      "details": "1. 现有pdf-home架构稳定且可作为开发基础\n2. WebSocket服务器（端口8765）正常运行且支持扩展消息类型\n3. PDF.js v3.4.120+版本与QtWebEngine兼容\n4. 后端有权限读取data/pdfs目录下的PDF文件\n5. Qt 5.15和Qt6.5环境可用且配置正确\n6. 测试数据7d688289f74a.pdf可正常解析（尽管page_count=0）\n7. Vite开发服务器支持多模块路由配置"
    },
    "evidence": {
      "title": "证据",
      "summary": "支持方案可行性的技术证据和项目现状",
      "details": "1. 现有规范文档：\n   - PDF-VIEWER-STRUCTURE-001.md：模块结构规范\n   - PDF-VIEWER-PDFJS-INTEGRATION-001.md：PDF.js集成规范\n   - PDF-VIEWER-WEBSOCKET-CONTRACT-001.md：WebSocket通信规范\n   - PDF-VIEWER-QTWEBENGINE-ADAPTATION-001.md：QtWebEngine适配规范\n\n2. 技术基础设施：\n   - WebSocket标准协议已实现（standard_protocol.py）\n   - 事件总线架构成熟（eventbus.js）\n   - PDF.js CDN资源可用（cdnjs.cloudflare.com）\n   - 后端PDF管理器功能完整（pdf_manager模块）\n\n3. 测试数据验证：\n   - data/pdfs/7d688289f74a.pdf存在（10.3MB）\n   - data/pdf_files.json包含文件元数据（page_count=0需要修复）\n   - 其他测试PDF文件可用（56MB大文件测试）\n\n4. 开发环境：\n   - ai-launcher.ps1现有启动流程稳定\n   - Vite开发服务器配置完整\n   - QtWebEngine远程调试端口已启用（9223）"
    },
    "conclusion": {
      "title": "结论",
      "summary": "方案技术可行，符合现有规范，可立即实施",
      "details": "经过多轮复核和修订，PDF查看器开发方案已达到实施标准。方案：\n\n1. ✅ 准确识别了现有模块状态（有规范无代码）\n2. ✅ 完全符合项目现有规范和架构模式\n3. ✅ 技术可行性高，基于成熟的技术栈\n4. ✅ 考虑了QtWebEngine兼容性和性能优化\n5. ✅ 提供了具体的实现步骤和测试计划\n6. ✅ 解决了数据源（page_count=0）和技术细节问题\n\n方案实施后，可通过./ai-launcher.ps1启动并在QtWebEngine窗口中看到PDF渲染效果。建议在实施阶段重点关注ai-launcher的具体修改方案和main.js的详细实现。"
    }
  },
  "references": [
    {
      "title": "PDF查看器模块规范头文件",
      "url": "src/frontend/pdf-viewer/docs/SPEC/SPEC-HEAD-pdf-viewer.json"
    },
    {
      "title": "PDF.js集成规范",
      "url": "src/frontend/pdf-viewer/docs/SPEC/PDF-VIEWER-PDFJS-INTEGRATION-001.md"
    },
    {
      "title": "WebSocket通信规范",
      "url": "src/frontend/pdf-viewer/docs/SPEC/PDF-VIEWER-WEBSOCKET-CONTRACT-001.md"
    },
    {
      "title": "标准WebSocket协议",
      "url": "src/backend/websocket/standard_protocol.py"
    },
    {
      "title": "主应用类",
      "url": "src/backend/app/application.py"
    },
    {
      "title": "启动脚本",
      "url": "ai-launcher.ps1"
    },
    {
      "title": "PDF文件元数据",
      "url": "data/pdf_files.json"
    }
  ]
}