{
  "metadata": {
    "created_at": "2025-09-10T16:17:52+08:00",
    "source_solution": "AIforum/20250910155638-solution-001.json",
    "initiator": "agent-atomizer",
    "version": 1
  },
  "task-background": {
    "project-name": "DevTools/CDP 日志采集器集成",
    "description": "将 solution 中 proposed_patch、testing_instructions、expected_log_format、sample_log_entries、files_changed、risk_and_mitigation 拆解为原子任务。此文件为草案 (draft)，等待 agent-atomize-reviewer 审阅后定稿。",
    "content": "内容总结自 AIforum/20250910155638-solution-001.json",
    "refers": [
      "AIforum/20250910155638-solution-001.json",
      "docs/AI-docs-schema/AIforum.schema.json"
    ],
    "status": "draft",
    "total-atom-task-count": 14
  },
  "atom-task-list": [
    {
      "id": "atom-001",
      "title": "审阅 solution 并确认范围",
      "description": "读取 AIforum/20250910155638-solution-001.json，确认 proposed_patch 中的变更点（app.py），确认 files_changed、测试 PDF 位置（test_files/test.pdf），并列出需要修改或查看的文件清单。\n执行步骤：\n 1) 打开并阅读 AIforum/20250910155638-solution-001.json。\n 2) 在仓库中检查 app.py、src/backend/main.py、test_files/test.pdf 的存在性并记录路径。\n 3) 将发现的差异或需人工确认项记录为任务反馈。",
      "estimated_time_minutes": 30,
      "dependencies": [],
      "required_files": [
        "AIforum/20250910155638-solution-001.json",
        "app.py",
        "src/backend/main.py",
        "test_files/test.pdf"
      ],
      "output_files": [],
      "commands": [
        "type AIforum/20250910155638-solution-001.json",
        "powershell -Command \"Test-Path ./app.py; Test-Path ./src/backend/main.py; Test-Path ./test_files/test.pdf\"",
        "python -m py_compile app.py"
      ],
      "acceptance_criteria": "确认 solution 中列出的文件存在；列出 1) 被修改文件清单 2) 可用于测试的 PDF 路径；若发现缺失项，记录并标注需人工确认。"
    },
    {
      "id": "atom-002",
      "title": "创建工作分支并备份 app.py",
      "description": "在本地仓库创建工作分支并备份 app.py 以便可回滚。\n执行步骤：\n 1) 创建本地分支： git checkout -b feat/cdp-collector/20250910\n 2) 复制 app.py 到 AItemp/app.py.bak 作为备份\n 3) 验证备份完整性（比较文件哈希或内容）",
      "estimated_time_minutes": 20,
      "dependencies": [
        "atom-001"
      ],
      "required_files": [
        "app.py"
      ],
      "output_files": [
        "AItemp/app.py.bak"
      ],
      "commands": [
        "git checkout -b feat/cdp-collector/20250910",
        "mkdir -p AItemp",
        "copy app.py AItemp/app.py.bak  # PowerShell"
      ],
      "acceptance_criteria": "工作分支已创建且当前 HEAD 在该分支；备份文件 AItemp/app.py.bak 存在且与 app.py 内容一致。"
    },
    {
      "id": "atom-003",
      "title": "编写单元测试 (Mock WebSocket) — 验证日志写入",
      "description": "为 DevToolsLogCollector 编写单元测试，使用 mocking (monkeypatch) 模拟 websockets 或对 _write_log 的调用，断言会写入符合 expected_log_format 的 JSON 行。\n执行步骤：\n 1) 在 test/ 下添加 test_devtools_collector_unit.py\n 2) 使用 pytest 的 monkeypatch 模拟 websockets.connect 和 ws.recv 返回预定义消息\n 3) 启动 collector 的相关方法（可直接调用 _write_log）并断言 logs/pdf-viewer.log 写入预期 JSON 行格式\n 4) 运行 pytest 并记录结果（此单元测试为 TDD，可期望在未应用实现前失败）",
      "estimated_time_minutes": 45,
      "dependencies": [
        "atom-002"
      ],
      "required_files": [
        "AIforum/20250910155638-solution-001.json",
        "app.py"
      ],
      "output_files": [
        "test/test_devtools_collector_unit.py"
      ],
      "commands": [
        "mkdir -p test",
        "edit test/test_devtools_collector_unit.py  # 创建单元测试并使用 monkeypatch 或 mock",
        "pytest -q test/test_devtools_collector_unit.py"
      ],
      "acceptance_criteria": "单元测试文件已创建；pytest 可执行并能运行此测试；测试在未实现或未正确写入日志时表现为失败（符合 TDD），并在实现后通过。"
    },
    {
      "id": "atom-004",
      "title": "生成补丁文件并应用到工作分支",
      "description": "将 solution.proposed_patch.diff 内容写入补丁文件并应用到当前分支（补丁文件名与位置必须与 forum 讨论一致）。\n执行步骤：\n 1) 将 proposed_patch.diff 保存为 AIforum/20250910161752-app-cdp.diff\n 2) 在工作分支应用补丁： git apply AIforum/20250910161752-app-cdp.diff 或手动修改 app.py\n 3) 运行 python -m py_compile app.py 确认语法无误\n 4) git add app.py && git commit -m \"feat: add DevTools/CDP collector to log pdf-viewer events\"\n 5) 若需要，git push origin feat/cdp-collector/20250910",
      "estimated_time_minutes": 45,
      "dependencies": [
        "atom-003"
      ],
      "required_files": [
        "AIforum/20250910155638-solution-001.json",
        "app.py"
      ],
      "output_files": [
        "AIforum/20250910161752-app-cdp.diff",
        "app.py (modified)",
        "git commit (feat/cdp-collector/20250910)"
      ],
      "commands": [
        "Save proposed diff to AIforum/20250910161752-app-cdp.diff",
        "git apply AIforum/20250910161752-app-cdp.diff  # 或手动编辑 app.py",
        "python -m py_compile app.py",
        "git add app.py && git commit -m \"feat: add DevTools/CDP collector to log pdf-viewer events\""
      ],
      "acceptance_criteria": "补丁文件已保存为 AIforum/20250910161752-app-cdp.diff；app.py 已按补丁内容修改且语法检查通过；提交已产生（git log 包含该提交）。"
    },
    {
      "id": "atom-005",
      "title": "更新依赖：将 websockets 加入 requirements 并记录回滚步骤",
      "description": "在 src/backend/requirements.txt 中追加 websockets 依赖，并记录如何回滚该依赖的步骤。\n执行步骤：\n 1) 在 src/backend/requirements.txt 中追加 'websockets>=11.0.0'\n 2) git add/commit\n 3) 在任务说明中写明回滚命令（pip uninstall websockets / 从 requirements.txt 中移除并重建环境）",
      "estimated_time_minutes": 20,
      "dependencies": [
        "atom-004"
      ],
      "required_files": [
        "src/backend/requirements.txt"
      ],
      "output_files": [
        "src/backend/requirements.txt (updated)",
        "git commit"
      ],
      "commands": [
        "echo \"websockets>=11.0.0\" >> src/backend/requirements.txt",
        "git add src/backend/requirements.txt && git commit -m \"chore: add websockets to backend requirements\""
      ],
      "acceptance_criteria": "src/backend/requirements.txt 包含 'websockets>=11.0.0'；提交记录存在；任务说明中包含明确的回滚命令（pip uninstall websockets / 从 requirements 中移除并恢复）。"
    },
    {
      "id": "atom-006",
      "title": "创建虚拟环境并安装依赖（包含 websockets）",
      "description": "在项目根创建并激活虚拟环境，安装 src/backend/requirements.txt 的依赖并确保 websockets 已安装。\n执行步骤：\n 1) python -m venv .venv\n 2) .\\\\.venv\\\\Scripts\\\\Activate.ps1（PowerShell）\n 3) pip install -r src/backend/requirements.txt\n 4) pip show websockets 验证安装\n 5) 记录 pip freeze 以便回滚比较",
      "estimated_time_minutes": 30,
      "dependencies": [
        "atom-005"
      ],
      "required_files": [
        "src/backend/requirements.txt"
      ],
      "output_files": [
        ".venv/ (virtualenv created)",
        "pip freeze output (optional)"
      ],
      "commands": [
        "python -m venv .venv",
        ".\\\\.venv\\\\Scripts\\\\Activate.ps1  # PowerShell",
        "pip install -r src/backend/requirements.txt",
        "pip show websockets"
      ],
      "acceptance_criteria": "虚拟环境已创建并激活；pip show websockets 返回已安装信息；pip install 没有报错。"
    },
    {
      "id": "atom-007",
      "title": "运行单元测试并修复失败 (包含 unit tests)",
      "description": "在虚拟环境中运行 pytest，修复因补丁或实现导致的失败，直到单元测试通过。\n执行步骤：\n 1) pytest -q\n 2) 根据失败信息修改实现或测试\n 3) 重复直到通过\n 4) 提交必要的修复",
      "estimated_time_minutes": 60,
      "dependencies": [
        "atom-003",
        "atom-004",
        "atom-006"
      ],
      "required_files": [
        "test/test_devtools_collector_unit.py",
        "app.py"
      ],
      "output_files": [
        "pytest report",
        "fix commits if any"
      ],
      "commands": [
        "pytest -q",
        "git add . && git commit -m \"test: make devtools collector unit tests pass\""
      ],
      "acceptance_criteria": "与 collector 相关的单元测试全部通过；提交记录包含修复。"
    },
    {
      "id": "atom-008",
      "title": "使用 ai-launcher.ps1 启动并确认日志文件存在",
      "description": "用 ai-launcher.ps1 启动后端与前端（Windows PowerShell），观察 logs/pdf-viewer.log 是否被创建并写入。\n执行步骤：\n 1) .\\\\ai-launcher.ps1 start\n 2) 等待前端 dev server 与桌面窗口启动\n 3) 在项目根检查 logs/pdf-viewer.log 是否存在\n 4) 若存在，使用 Get-Content .\\\\logs\\\\pdf-viewer.log -Wait 观察输出（人工确认）",
      "estimated_time_minutes": 30,
      "dependencies": [
        "atom-006",
        "atom-004"
      ],
      "required_files": [
        "ai-launcher.ps1"
      ],
      "output_files": [
        "logs/pdf-viewer.log"
      ],
      "commands": [
        ".\\\\ai-launcher.ps1 start",
        "Get-Content .\\\\logs\\\\pdf-viewer.log -Wait  # PowerShell",
        "tail -f logs/pdf-viewer.log  # bash"
      ],
      "acceptance_criteria": "logs/pdf-viewer.log 被创建，且 Collector 在运行期间不会导致主进程崩溃（短时观察）；需要人工确认 UI 已打开并可交互。"
    },
    {
      "id": "atom-009",
      "title": "加载测试 PDF 并验证预期日志条目",
      "description": "在应用 UI 中打开 test_files/test.pdf 或通过前端触发 pdf-viewer 的加载，检查 logs/pdf-viewer.log 是否包含 sample_log_entries 中的事件。\n执行步骤：\n 1) 在 UI 中打开或通过浏览器访问 pdf-viewer 并加载 test_files/test.pdf（人工操作）\n 2) 监控 logs/pdf-viewer.log，截取至少 3 条不同事件（targets.discovered、Runtime.consoleAPICalled、Page.loadEventFired 等）\n 3) 保存示例到 AIforum/20250910161752-log-sample.txt",
      "estimated_time_minutes": 45,
      "dependencies": [
        "atom-008"
      ],
      "required_files": [
        "test_files/test.pdf",
        "logs/pdf-viewer.log"
      ],
      "output_files": [
        "AIforum/20250910161752-log-sample.txt"
      ],
      "commands": [
        "在 UI 中打开 test_files/test.pdf（人工步骤）",
        "Get-Content .\\\\logs\\\\pdf-viewer.log -Tail 100 | Select-String -Pattern \"targets.discovered|Runtime.consoleAPICalled|Page.loadEventFired|Runtime.exceptionThrown\"",
        "jq '.' logs/pdf-viewer.log | sed -n '1,100p' > AIforum/20250910161752-log-sample.txt"
      ],
      "acceptance_criteria": "logs/pdf-viewer.log 中包含至少 3 条与 sample_log_entries 格式一致的事件；AIforum/20250910161752-log-sample.txt 保存了这些样例（人工确认）。"
    },
    {
      "id": "atom-010",
      "title": "撰写运维文档：日志轮转与部署建议",
      "description": "编写 docs/ops/pdf-viewer-logging.md，包含日志路径、格式、轮转策略（Linux logrotate 示例、Windows 任务计划示例）、权限与回滚建议。\n执行步骤：\n 1) 创建 docs/ops/pdf-viewer-logging.md\n 2) 填写示例配置、轮转脚本与权限说明\n 3) 提交文档到仓库",
      "estimated_time_minutes": 30,
      "dependencies": [
        "atom-008"
      ],
      "required_files": [],
      "output_files": [
        "docs/ops/pdf-viewer-logging.md"
      ],
      "commands": [
        "mkdir -p docs/ops",
        "edit docs/ops/pdf-viewer-logging.md  # 添加轮转示例和说明",
        "git add docs/ops/pdf-viewer-logging.md && git commit -m \"docs: add pdf-viewer logging and rotation guidance\""
      ],
      "acceptance_criteria": "docs/ops/pdf-viewer-logging.md 存在并包含 Linux 和 Windows 的轮转示例以及回滚/权限说明。"
    },
    {
      "id": "atom-011",
      "title": "创建 Pull Request 草稿与发布说明",
      "description": "在 GitHub 上创建 PR 草稿，包含变更摘要、测试指引、回滚步骤和风险说明。\n执行步骤：\n 1) git push origin feat/cdp-collector/20250910\n 2) 在 AIforum 中生成 PR 描述文件 AIforum/20250910161752-PR-draft.md\n 3) 在 PR 页面填入变更摘要、测试步骤与 sample_log_entries",
      "estimated_time_minutes": 30,
      "dependencies": [
        "atom-007",
        "atom-010"
      ],
      "required_files": [],
      "output_files": [
        "AIforum/20250910161752-PR-draft.md"
      ],
      "commands": [
        "git push origin feat/cdp-collector/20250910",
        "edit AIforum/20250910161752-PR-draft.md  # 填写 PR 描述、测试步骤和回滚说明"
      ],
      "acceptance_criteria": "PR 草稿文件存在且包含变更摘要、测试步骤、sample_log_entries；GitHub 已创建 PR 草稿（人工确认）。"
    },
    {
      "id": "atom-012",
      "title": "回滚演练与验证",
      "description": "验证补丁回滚步骤可行并能恢复到修改前状态。\n执行步骤：\n 1) 记录当前 commit hash\n 2) 使用 git reset --hard <commit_before> 或 git revert 来回滚\n 3) 从备份恢复 app.py（AItemp/app.py.bak）\n 4) 删除或重命名 logs/pdf-viewer.log\n 5) 启动系统验证恢复成功（人工确认）",
      "estimated_time_minutes": 25,
      "dependencies": [
        "atom-004",
        "atom-006"
      ],
      "required_files": [
        "AItemp/app.py.bak"
      ],
      "output_files": [],
      "commands": [
        "git rev-parse --verify HEAD",
        "git reset --hard origin/main  # 或 git revert <commit>",
        "copy AItemp/app.py.bak app.py  # PowerShell",
        "Remove-Item .\\\\logs\\\\pdf-viewer.log  # PowerShell"
      ],
      "acceptance_criteria": "回滚命令成功执行且 app.py 恢复为备份版本；logs/pdf-viewer.log 已删除或重命名；系统能在回滚后启动（手动验证）。"
    },
    {
      "id": "atom-013",
      "title": "汇总结果并提交完成报告",
      "description": "在 AIforum 下提交完成报告，包括所有生成的文件路径、测试结果摘要与下一步建议。\n执行步骤：\n 1) 汇总各 atom 输出并更新 AIforum/20250910161752-atom-tasks-001.json 与 AIforum/20250910161752-satom-tasks-001.json\n 2) 在 forum 中记录完成，并调用 attempt_completion 报告完成",
      "estimated_time_minutes": 15,
      "dependencies": [
        "atom-011"
      ],
      "required_files": [],
      "output_files": [
        "AIforum/20250910161752-atom-tasks-001.json",
        "AIforum/20250910161752-satom-tasks-001.json"
      ],
      "commands": [
        "edit AIforum/20250910161752-atom-tasks-001.json  # 确认并提交最终版本",
        "edit AIforum/20250910161752-satom-tasks-001.json",
        "使用 attempt_completion 工具提交完成报告"
      ],
      "acceptance_criteria": "最终 atom-tasks 与 satom-tasks 文件存在且内容完整；forum 中 agent-atomize-reviewer 最后一条回复 opinion 为 'agree'。"
    },
    {
      "id": "atom-014",
      "title": "编写集成测试 (模拟 CDP target 与 WebSocket)",
      "description": "编写集成测试，在受控环境下启动一个 mock CDP HTTP / WebSocket endpoint，模拟 targets 列表与 WebSocket 消息，验证 DevToolsLogCollector 能够连接并写入多种事件到 logs/pdf-viewer.log。\n执行步骤：\n 1) 在 test/ 下添加 test_devtools_collector_integration.py\n 2) 使用 aiohttp / websockets 在测试内启动一个本地 mock 服务，返回符合 CDP /json 接口的数据，并提供 webSocketDebuggerUrl\n 3) 启动 collector（或其异步入口），通过 mock ws 发送示例消息\n 4) 断言 logs/pdf-viewer.log 包含对应事件行\n 5) 运行 pytest 并记录结果",
      "estimated_time_minutes": 70,
      "dependencies": [
        "atom-004",
        "atom-006"
      ],
      "required_files": [
        "app.py",
        "test/test_devtools_collector_unit.py"
      ],
      "output_files": [
        "test/test_devtools_collector_integration.py"
      ],
      "commands": [
        "edit test/test_devtools_collector_integration.py  # 实现 mock CDP http/ws server",
        "pytest -q test/test_devtools_collector_integration.py"
      ],
      "acceptance_criteria": "集成测试文件已创建；测试在本地环境可运行并能复现 collector 与 mock CDP/WS 交互，验证日志写入。"
    }
  ]
}