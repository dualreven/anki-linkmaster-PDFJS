# 你必须总是牢记你的执行流程和执行原则, 任何时候都不能忘记!

# 必须按以下流程执行
1. 你必须先获取 距离时间最近的五个`AItemp/[YYYYMMDDhhmmss]-AI-Working-log.md` 文件, 了解任务的历史.
2. 你必须创建 `AItemp/[YYYYMMDDhhmmss]-AI-Working-log.md` 文件, 记录当前的任务目标.
3. 你必须查看 `.kilocode\rules\memory-bank\context.md` 的内容, 理解用户的输入
4. 你必须更新 `.kilocode\rules\memory-bank\context.md`的内容, 如, 描述当前问题, 问题背景, 相关模块和函数等.
5. 如果 `.kilocode\rules\memory-bank\context.md` 有执行步骤,你必须按步骤执行
6. 如果任务步骤有多步,你必须考虑任务的工作量,按照原子任务的拆分原则(基于事实,任务简单且不可拆分),拆分成多个步骤, 将新步骤更新到 `.kilocode\rules\memory-bank\context.md`
7. 如果拆解出的任务和当前任务的关系不大, (例如:1更新多个文档,文档之间没有联系,2修复次生bug,和主要bug无关,3这个任务我们只需要知道结果), 你必须启动一个 `new_task(mode: smart-agent)` 执行子任务   
8. 执行原子步骤的任务, 你必须先设计测试代码, 然后开发, 开发结束后, 再调用测试代码, 测试代码通过才能交付.
9. 执行结束后,你必须更新下面的文档:
9.0 必须更新 `AItemp/[YYYYMMDDhhmmss]-AI-Working-log.md`, 记录任务的执行结果.
9.1 必须更新 `.kilocode\rules\memory-bank\context.md` , 记录对后续任务有帮助的信息.
9.2 如果架构改动, 则必须更新 `.kilocode\rules\memory-bank\architecture.md` , 记录架构的改动的细节(如模块变更,代码拆分).
9.3 如果使用方法改动, 则必须更新 `.kilocode\rules\memory-bank\tech.md`, 记录用法变动的细节(如函数参数变更, 调用方式变更, 执行脚本用法变更等).

# 你必须总是牢记你的执行流程和执行原则, 任何时候都不能忘记!
# 必须遵守下面的原则:

1. 你必须全过程使用 sequentialthinking MCP 工具进行多步基于事实依据的思考,思考的模式是(基于事实->存在困境->提出猜想->进行验证->合理执行)
1.1 当你缺乏事实依据时, 你应当收集依据, 来协助 sequentialthinking 而非立即执行任务.
2. 你必须全过程加载memory bank全部信息.
3. 你每次执行代码修改,包括任务完成时,必须更新 `AItemp/[YYYYMMDDhhmmss]-AI-Working-log.md` 文件, 其中 YYYYMMDDhhmmss 总是取最新时间.
4. 你必须追溯必要的`AI-Working-log.md`文件收集足够的信息, 查看上次的目标和结果, 并根据上次的结果, 确定本次的目标和实现方法.
5. 启动new_task,必须要他返回任务的执行结果, 并更新 `AItemp/[YYYYMMDDhhmmss]-AI-Working-log.md` 文件.
 

# working-log 格式
```markdown
# 上次目标和结果(要非常具体) 
## 上次记录的文件名
## 执行目标
## 后续处理
## 结果
# 本次目标和实现方法(要非常具体)
## 目标
## 任务类型(dev|debug|test|docs)
## 实现方法
## 预期结果
```

#  sequentialthinking的流程原则 `基于事实->存在困境->提出猜想->进行验证->合理执行` 的案例
```
任务：修复一个突然出现的 Docker 容器持续崩溃的问题。

基于事实：

事实：容器日志显示 Error: ECONNREFUSED 127.0.0.1:5432 后退出。

事实：该容器是一个 Node.js 应用，它依赖一个 PostgreSQL 数据库容器。

事实：此问题开始于一次主机系统重启之后。

存在困境：

应用无法启动，但错误指向数据库连接问题。需要确定是数据库没启动，还是应用配置错误，或是网络问题。

提出猜想：

猜想：数据库容器未能正常启动，导致应用容器无法连接。

进行验证：

验证：执行 docker ps 检查容器状态。发现只有 Node.js 容器在重启循环，而 PostgreSQL 容器根本不存在。

验证：检查 Docker Compose 文件，发现数据库的配置依赖于一个被误删的本地环境变量文件（.env）。

合理执行：

执行：恢复 .env 文件中的数据库配置变量。

执行：运行 docker-compose up -d 重新创建并启动所有服务。验证应用和数据库容器均运行正常。
```