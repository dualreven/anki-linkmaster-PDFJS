说明: 我之所以把事情拆分的那么细致,是为了保持一致性, 如果智能体把工作结果以文档形式保留下来,就能在任务中断后快速重新回复到当时的情景.

节点0: 
  角色: project-manager
  来源: null
  输入: 
    - 用户自然语言需求
  输出:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 0-3 启动指令（进入 1-proto-iter-developer）
  流程: 
    - 需求澄清与目标定义
    - 原型迭代计划(把目标分成多个原型版本逐步迭代趋近)
    - 对每一个原型版本:
      - 启动原型迭代开发（proto-iter-dev）

节点0.5:
  角色: project-vise-manager
  来源: project-manager
  输入:
    - 用户自然语言需求
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - manager 发起轮次的草稿文档地址（Markdown）
  输出:
    - 0.5-1 对话记录文档地址（Markdown）
    - 0.5-2 需求澄清提纲
    - 0.5-3 迭代目标细化建议
    - 0.5-4 风险与依赖清单
  流程:
    - project-manager 发起一轮对话：将简要想法写入 Markdown 文档并传递文档地址给 project-vise-manager
    - project-vise-manager 浏览该文档，审阅并在对话记录文档中写入认同或反驳（含具体建议）
    - project-vise-manager 返回对话记录文档地址给 project-manager
    - project-manager 根据对话更新需求文档与迭代目标，若需继续则发起下一轮
    - 循环直至达成共识或 project-manager 终止，并将最终对话记录与建议交付 project-manager

节点1:
  角色: proto-iter-developer
  来源: project-manager
  输入: 
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
  输出: 
    - 1.1 架构说明（来自节点 1.1.1.1）
    - 1.2 规范说明（来自节点 1.1.1.2）
    - 1.3 架构与规范一致性验收报告（来自节点 1.1.1.3）
    - 1.4 原子任务列表（来自节点 1.2.1）
    - 1.5 测试用例集（来自节点 1.2.1.1 汇总）
    - 1.6 分组计划（来自节点 1.2.2）
    - 1.7 分组任务执行结果（来自节点 1.3.1）
    - 1.8 迭代验收报告（本节点产出）
  流程: 
    - 从原型计划中选择原型版本
    - 创建迭代分支 
    - 调用 1.1 ArchSpec-Manager 
    - 调用 1.2 Interface-Designer
    - 调用 1.3 Task-Design-Manager 
    - 对每个分组:
      - 调用 1.4 Group-Job-Manager 
    - 迭代验收 
    - 合并分支

节点1.1: 
  角色: archSpecAPI-manager
  来源: proto-iter-developer
  输入: 
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
  输出: 
    - 1.1.1 架构说明（转 1.1.1.1 产物）
    - 1.1.2 规范说明（转 1.1.1.2 产物）
    - 1.1.3 架构与规范一致性验收报告（转 1.1.1.3 产物）
  流程: 
    - 调用 Arch-Designer
    - 调用 Spec-Designer
    - 调用 Conflict-Detector

节点1.1.1: 
  角色: arch-designer
  来源: archSpecAPI-manager
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
  输出:
    - 1.1.1-1 架构说明
  流程:
    - 架构生成/调整

节点1.1.2: 
  角色: spec-designer
  来源: archSpecAPI-manager
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
  输出:
    - 1.1.2-1 规范说明
  流程: 规范生成/调整（编码规范、API 风格、错误码、日志、性能/安全/合规约束等）



节点1.1.3: 
  角色: interface-designer
  来源: archSpecAPI-manager
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
  输出:
    - 1.1.3-1 宏观接口说明
  流程: 
    - 基于需求/目标/架构/规范进行接口设计
  
节点1.1.4: 
  角色: conflict-detector
  来源: archSpecAPI-manager
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
  输出:
    - 1.1.3 架构与规范一致性验收报告
  流程: 
    - 检测架构与规范冲突，给出是否通过及问题清单

节点1.2:
  角色: task-design-manager
  来源: proto-iter-developer
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
  输出:
    - 1.2-1 宏观任务汇总
    - 1.2-2 原子任务汇总
    - 1.2-3 分组任务汇总
    - 1.2-4 分组任务详情
    - 1.2-5 原子任务详情
  流程: 
    - 基于需求/目标/架构/规范进行任务设计

节点1.3: 
  角色: Group-Job-Manager
  来源: proto-iter-developer
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
    - 1.2-1 宏观任务汇总
    - 1.2-2 原子任务汇总
    - 1.2-3 分组任务汇总
    - 1.2-4 分组任务详情
    - 1.2-5 原子任务详情
  输出:
    - 1.3 分组任务执行结果（含通过率、缺陷清单、工时消耗）
  流程: 
    - 按分组计划对每个原子任务调用 Job-Executor；汇总结果

节点1.3.1: 
  角色: Job-Executor
  来源: Group-Job-Manager
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
    - 1.2-1 宏观任务汇总
    - 1.2-2 原子任务汇总
    - 1.2-3 分组任务汇总
    - 1.2-4 分组任务详情
    - 1.2-5 原子任务详情
  输出:
    - 1.3.1 原子任务执行结果（含构建产物、日志、状态）
  流程: 
    - 对单个原子任务-> test-designer → code-generator → test-verifier → spec-verifier → 产出结果

节点1.3.1.1:
  角色: test-designer
  来源: job-executor
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
    - 1.2-1 宏观任务汇总
    - 1.2-2 原子任务汇总
    - 1.2-3 分组任务汇总
    - 1.2-4 分组任务详情
    - 1.2-5 原子任务详情
  输出:
    - 1.3.1.1-1 测试用例
    - 1.3.1.1-2 测试代码
  流程: 
    - 生成/修改测试用例与测试脚本

节点1.3.1.2:
  角色: code-generator
  来源: job-executor
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
    - 1.2-1 宏观任务汇总
    - 1.2-2 原子任务汇总
    - 1.2-3 分组任务汇总
    - 1.2-4 分组任务详情
    - 1.2-5 原子任务详情
    - 1.3.1.1-1 测试用例
    - 1.3.1.1-2 测试代码
  输出:
    - 1.3.1.2-1 开发报告
  流程: 
    - 生成/修改具体代码
    - 返回开发报告

节点1.3.1.3:
  角色: test-verifier
  来源: job-executor
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
    - 1.2-1 宏观任务汇总
    - 1.2-2 原子任务汇总
    - 1.2-3 分组任务汇总
    - 1.2-4 分组任务详情
    - 1.2-5 原子任务详情
    - 1.3.1.1-1 测试用例
    - 1.3.1.1-2 测试代码
    - 1.3.1.2-1 开发报告
  输出:
    - 1.3.1.3-1 测试验证报告
  流程: 
    - 测试代码是否通过

节点1.3.1.4:
  角色: spec-verifier
  来源: job-executor
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
    - 1.2-1 宏观任务汇总
    - 1.2-2 原子任务汇总
    - 1.2-3 分组任务汇总
    - 1.2-4 分组任务详情
    - 1.2-5 原子任务详情
    - 1.3.1.1-1 测试用例
    - 1.3.1.1-2 测试代码
    - 1.3.1.2-1 开发报告
  输出:
    - 1.3.1.4-1 规范验证报告
  流程: 
    - 验证规范约束（样式、静态扫描、安全、性能阈值等）

节点1.4:
  角色: iteration-acceptance
  来源: proto-iter-developer
  输入:
    - 0-1 需求对齐文档
    - 0-2 原型迭代目标说明
    - 1.1.1-1 架构说明
    - 1.1.2-1 规范说明
    - 1.1.3-1 宏观接口说明
    - 1.2-1 宏观任务汇总
    - 1.2-2 原子任务汇总
    - 1.2-3 分组任务汇总
    - 1.2-4 分组任务详情
    - 1.2-5 原子任务详情
    - 1.3.1.1-1 测试用例
    - 1.3.1.1-2 测试代码
    - 1.3.1.2-1 开发报告
  输出:
    - 1.4 迭代验收报告
  流程: 
    - 抽查结果是否符合需求