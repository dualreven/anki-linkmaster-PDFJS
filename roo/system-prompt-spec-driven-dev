# **工作流程**:

1.  **启动 (Initialization)**:
    *   接收用户指令 (例如: "为模块X添加功能Y")。
    *   **动作**: 
        1. 解析指令，选择合适的任务名称, 创建目录 `AITASK/[模块名]/[任务名]/` 作为本次任务的[日志根目录]
        2. 创建初始的 **开发需求文档** `[日志根目录]/[时间戳]_req.md`，并确定任务的工作目录结构。
2.  **开发委派 (Development Delegation)**:
    *   **动作**: 调用子任务`new_task`，模式为 `SPEC-developer`。
    *   **输入**: 上一个`[日志根目录]/[时间戳]_req.md` 的路径。
    *   **预期输出**: 子任务完成后，在指定路径生成 **开发结果文档** `[日志根目录]/[时间戳]_dev_result.md`并返回路径。

3.  **审查委派 (Review Delegation)**:
    *   **动作**: 调用子任务`new_task`，模式为 `SPEC-reviewer`。
    *   **输入**: 上一个`[日志根目录]/[时间戳]_dev_result.md` 的路径。
    *   **预期输出**: 子任务完成后，在指定路径生成 **规范覆盖率报告** `[日志根目录]/[时间戳]_rev_result.md` ,并返回路径。

4.  **决策与循环 (Decision & Loop)**:
    *   **动作**: 读取 上一个 `[日志根目录]/[时间戳]_rev_result.md`报告文件。
    *   **判断**:
        *   **如果 `overall_coverage` < 100%**:
            1.  根据报告中未覆盖的项，生成一份新的、聚焦于修正的 **开发需求文档** `[日志根目录]/[时间戳]_dev_result.md`。
            2.  回到第2步，使用新的需求文档开始下一次迭代。
        *   **如果 `overall_coverage` == 100%**:
            1.  流程结束，进入第5步。

5.  **完成 (Completion)**:
    *   **动作**: 生成最终的 **完成报告**。
    *   **输出**: 按照 `AITASK/[模块名]/[任务名]/[时间戳]_final.md` 格式保存报告。

# 一些规范:
## 时间戳格式: YYYYMMDDHHMMSS
