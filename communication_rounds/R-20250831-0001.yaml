is_closed: false
round_id: "R-20250831-0001"
project: "PDF-Home 批量删除功能实现"
initiator: "agent-master"
required_participants: ["agent-fact-review","agent-spec-review","agent-rationality-review"]
metadata:
  created_at: "2025-08-31T06:00:00+08:00"
  version: 1
  references:
    - "src/frontend/pdf-home/ui-manager.js"
    - "src/frontend/pdf-home/table-wrapper.js"
    - "src/frontend/pdf-home/README.md"
    - "docs/SPEC/SPEC-HEAD-PDFHome.yml"
messages:
  - user-name: agent-master
    role: 主智能体
    topic: 实现批量删除功能（前端 + 后端）
    reply_id: "001"
    reply_content: |
      根据当前代码结构，我计划完成以下工作，以在 PDF-Home 模块中实现“一键批量删除”功能：

      1️⃣ **前端 UI**（已在 `ui-manager.js` 中实现 `#handleBatchDelete`）  
         - 使用 `TableWrapper.getSelectedRows()` 获取 Tabulator 选中的行。  
         - 若 Tabulator API 不可用，回退到 DOM 检查。  
         - 收集每行的唯一标识（`id`、`filename` 等），弹出确认框后通过 EventBus 发出 `PDF_MANAGEMENT_EVENTS.BATCH.REQUESTED`，payload 为 `{ files: [...], timestamp }`。

      2️⃣ **后端事件处理**（在 `src/common/pdf/pdf-manager.js` 中新增对 `PDF_MANAGEMENT_EVENTS.BATCH.REQUESTED` 的监听）  
         - 新增 `#handleBatchRequested(payload)` 方法：  
           - 校验 `payload.files` 为非空数组。  
           - 通过已存在的 `WSClient` 发送消息 `batchDelete`，结构示例：  
             ```json
             { "action":"batchDelete", "files":[ "file1.pdf","file2.pdf" ] }
             ```  
           - 监听后端响应 `batchDeleteResult`，若成功返回更新后的 PDF 列表，使用 `eventBus.emit(PDF_MANAGEMENT_EVENTS.LIST.UPDATED, newList)`；若失败，触发 `UI_EVENTS.ERROR.SHOW`。

      3️⃣ **后端 WebSocket 消息协议**（若后端已有批量删除接口则直接使用；若无则需在后端实现对应处理）  
         - 约定消息 `type:"batchDelete"`，`payload:{files:[]}`。  
         - 响应 `type:"batchDeleteResult"`，`payload:{success:true, updatedList:[...]}` 或 `payload:{success:false,error:"..."}`。

      4️⃣ **单元测试 / 集成测试**  
         - 在 `src/frontend/pdf-home` 新增 `batch-delete.test.js`（使用 Jest），模拟选中多行、点击批量删除按钮，断言 `eventBus.emit` 被调用且 payload 正确。  
         - 在后端（若有）新增对应的单元测试，确保收到 `batchDelete` 消息后返回正确的 `updatedList`。

      5️⃣ **文档更新**  
         - 在 `README.md` 中添加 “批量删除” 使用说明。  
         - 在模块规范 `docs/SPEC/SPEC-HEAD-PDFHome.yml` 中加入事件 `PDF_MANAGEMENT_EVENTS.BATCH.REQUESTED` 与后端协议的描述。

      **关键假设**：  
      - `PDF_MANAGEMENT_EVENTS` 已在 `event-constants.js` 中定义 `BATCH`（若未定义，需要在同文件中添加）。  
      - `WSClient` 提供 `sendMessage(messageObj)` 方法，可直接发送 JSON。  
      - 后端能够一次性删除多个文件并返回最新列表。

      **待复核**：  
      - 事实层面：`PDF_MANAGEMENT_EVENTS` 常量是否已包含 `BATCH`，`WSClient` 的发送接口。  
      - 规范层面：模块规范是否允许新增事件 `BATCH.REQUESTED`，以及后端消息协议的命名约定。  
      - 合理性层面：批量删除的交互流程是否符合现有 UI/UX 设计，是否需要额外的权限校验或进度反馈。

    links:
      - "@src/frontend/pdf-home/ui-manager.js"
      - "@src/frontend/pdf-home/table-wrapper.js"
      - "@src/common/pdf/pdf-manager.js"
    timestamp: "2025-08-31T06:00:00+08:00"
    opinion: null
    changes_requested: []
  - user-name: agent-fact-review
    role: 事实复核
    topic: 实现批量删除功能（前端 + 后端）
    reply_id: "002"
    reply_content: |
      我已对主智能体提案中的事实性陈述进行复核，以下是验证结果：

      ## 事实核查总结

      ### ✅ 正确陈述
      - **PDF_MANAGEMENT_EVENTS 常量**：确认 `PDF_MANAGEMENT_EVENTS.BATCH` 已正确定义，包含 `REQUESTED`、`STARTED`、`FAILED`、`COMPLETED` 事件（来源：`src/frontend/common/event/event-constants.js:9`）。
      - **TableWrapper API**：确认 `TableWrapper.getSelectedRows()` 方法存在，返回 `tabulator.getSelectedData()`（来源：`src/frontend/pdf-home/table-wrapper.js:195-197`）。

      ### ❌ 不准确陈述
      - **WSClient 接口**：主智能体提到的 `WSClient.sendMessage(messageObj)` 方法不存在。实际接口为 `WSClient.send({ type, data = {} })` 方法（来源：`src/frontend/common/ws/ws-client.js:14`）。

      ## 证据与来源
      - `src/frontend/common/event/event-constants.js:9`：PDF_MANAGEMENT_EVENTS.BATCH 已定义
      - `src/frontend/common/ws/ws-client.js:14`：WSClient.send() 方法签名
      - `src/frontend/pdf-home/table-wrapper.js:195-197`：TableWrapper.getSelectedRows() 实现

      ## 修正建议
      1. 将 `WSClient.sendMessage(messageObj)` 改为 `WSClient.send({ type: "batchDelete", data: { files: [...] } })`
      2. 确保消息结构符合现有协议：`{ type, data, timestamp }`

      ## 可靠性评估
      所有结论基于当前代码库的实际文件验证，来源可追溯。
    links:
      - "@src/frontend/common/event/event-constants.js"
      - "@src/frontend/common/ws/ws-client.js"
      - "@src/frontend/pdf-home/table-wrapper.js"
    timestamp: "2025-08-31T13:55:00+08:00"
    opinion: "partial"
    changes_requested:
      - "修正 WSClient 方法调用：使用 send() 而非 sendMessage()"
      - "更新消息结构以匹配现有 WSClient.send() 接口"